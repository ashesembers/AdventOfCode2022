INPUT_STR = """
Monkey 0:
  Starting items: 61
  Operation: new = old * 11
  Test: divisible by 5
    If true: throw to monkey 7
    If false: throw to monkey 4
Monkey 1:
  Starting items: 76, 92, 53, 93, 79, 86, 81
  Operation: new = old + 4
  Test: divisible by 2
    If true: throw to monkey 2
    If false: throw to monkey 6
Monkey 2:
  Starting items: 91, 99
  Operation: new = old * 19
  Test: divisible by 13
    If true: throw to monkey 5
    If false: throw to monkey 0
Monkey 3:
  Starting items: 58, 67, 66
  Operation: new = old * old
  Test: divisible by 7
    If true: throw to monkey 6
    If false: throw to monkey 1
Monkey 4:
  Starting items: 94, 54, 62, 73
  Operation: new = old + 1
  Test: divisible by 19
    If true: throw to monkey 3
    If false: throw to monkey 7
Monkey 5:
  Starting items: 59, 95, 51, 58, 58
  Operation: new = old + 3
  Test: divisible by 11
    If true: throw to monkey 0
    If false: throw to monkey 4
Monkey 6:
  Starting items: 87, 69, 92, 56, 91, 93, 88, 73
  Operation: new = old + 8
  Test: divisible by 3
    If true: throw to monkey 5
    If false: throw to monkey 2
Monkey 7:
  Starting items: 71, 57, 86, 67, 96, 95
  Operation: new = old + 7
  Test: divisible by 17
    If true: throw to monkey 3
    If false: throw to monkey 1"""


TEST_INPUT_STR = """
Monkey 0:
  Starting items: 79, 98
  Operation: new = old * 19
  Test: divisible by 23
    If true: throw to monkey 2
    If false: throw to monkey 3
Monkey 1:
  Starting items: 54, 65, 75, 74
  Operation: new = old + 6
  Test: divisible by 19
    If true: throw to monkey 2
    If false: throw to monkey 0
Monkey 2:
  Starting items: 79, 60, 97
  Operation: new = old * old
  Test: divisible by 13
    If true: throw to monkey 1
    If false: throw to monkey 3
Monkey 3:
  Starting items: 74
  Operation: new = old + 3
  Test: divisible by 17
    If true: throw to monkey 0
    If false: throw to monkey 1"""


class Monkey:
    def __init__(self, num, items, op, divisible_by, monkey_true, monkey_false):
        self.num = num
        self.items = items
        self.op = op
        self.divisible_by = divisible_by
        self.monkey_true = monkey_true
        self.monkey_false = monkey_false

    def give_item(self, item):
        self.items.append(item)

    def throw_item(self):
        return self.items.pop(0)

    def to_string(self):
        return f"Monkey {self.num} - Items: {self.items} Operation: {self.op} Test: divisible by {self.divisible_by} if true pass to {self.monkey_true} if false pass to {self.monkey_false}"


def parse_monkeys(input_str):
    monkeys = []
    for monkey in input_str.split("\nMonkey"):
        if not monkey.strip():
            continue
        m, start, operation, test, if_true, if_false = [n for n in monkey.split("\n") if n]
        if not any([m, start, operation, test, if_true, if_false]):
            continue
        num = int(m.replace(":", "").strip())
        items = [int(x) for x in start.replace("Starting items: ", "").strip().split(", ")]
        op = operation.replace("Operation: new = ", "").strip()
        divisible_by = int(test.replace("Test: divisible by ", "").strip())
        monkey_true = int(if_true.replace("If true: throw to monkey ", "").strip())
        monkey_false = int(if_false.replace("If false: throw to monkey ", "").strip())
        monkeys.append(Monkey(num, items, op, divisible_by, monkey_true, monkey_false))
    return monkeys


def do_round(monkeys, magic_number=None):
    inspections = [0 for m in monkeys]
    count = 0
    for m in monkeys:
        while m.items:
            inspections[count] += 1
            old_worry = m.items[0]
            if m.op.startswith("old * "):
                _, factor = m.op.split("old * ")
                if factor == "old":
                    new_worry = old_worry * old_worry
                else:
                    new_worry = old_worry * int(factor)
            else:
                _, add = m.op.split("old + ")
                new_worry = old_worry + int(add)
            new_worry_reduced = reduce(new_worry, magic_number)
            if new_worry_reduced % m.divisible_by == 0:
                m.throw_item()
                monkeys[m.monkey_true].give_item(new_worry_reduced)
            else:
                m.throw_item()
                monkeys[m.monkey_false].give_item(new_worry_reduced)
        count += 1
    return inspections


def reduce(worry, magic_number):
    if magic_number:
        return worry % magic_number
    else:
        return int(worry / 3)


def go(input_str, rounds):
    monkeys = parse_monkeys(input_str)
    inspections = [0 for m in monkeys]
    for i in range(rounds):
        xx = do_round(monkeys)
        for x in range(len(xx)):
            inspections[x] += xx[x]
    print(sorted(inspections)[-2:])


if __name__ == "__main__":
    go(INPUT_STR, 20)
    go(INPUT_STR, 10000)
